import os
import cv2
import numpy as np
from PIL import Image
from transformers import CLIPProcessor, CLIPModel
from sklearn.metrics.pairwise import cosine_similarity
import spacy
from rasa.nlu.model import Interpreter

# Загрузка модели CLIP для поиска по картинкам
clip_model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
clip_processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

# Загрузка модели для анализа текста
nlp = spacy.load("en_core_web_sm")

# Инициализация Rasa NLU модели для обработки запросов
interpreter = Interpreter.load("./rasa_model")  # Укажите путь к обученной Rasa модели

# Функция анализа текста
def analyze_request(user_input):
    intent = interpreter.parse(user_input)
    return intent

# Функция поиска изображений
def find_similar_images(query, image_folder):
    # Преобразование запроса в вектор
    inputs = clip_processor(text=[query], return_tensors="pt", truncation=True)
    text_features = clip_model.get_text_features(**inputs).detach().numpy()

    # Инициализация списка для хранения результатов
    image_scores = []

    # Проход по всем изображениям в папке
    for image_file in os.listdir(image_folder):
        image_path = os.path.join(image_folder, image_file)
        if not image_file.lower().endswith(('.png', '.jpg', '.jpeg')):
            continue
        image = Image.open(image_path).convert("RGB")
        image_inputs = clip_processor(images=image, return_tensors="pt", truncation=True)
        image_features = clip_model.get_image_features(**image_inputs).detach().numpy()

        # Расчет сходства между запросом и изображением
        similarity = cosine_similarity(text_features, image_features)
        image_scores.append((image_path, similarity[0][0]))

    # Сортировка по сходству
    image_scores = sorted(image_scores, key=lambda x: x[1], reverse=True)
    return image_scores[:5]  # Возвращаем топ-5 изображений

# Функция общения с пользователем
def chatbot():
    print("Привет! Я могу помочь найти картинки по запросу.")
    while True:
        user_input = input("Вы: ")
        if user_input.lower() in ['выход', 'стоп', 'пока']:
            print("Бот: До свидания!")
            break

        # Анализ запроса
        intent = analyze_request(user_input)
        if intent["intent"]["name"] == "search_image":
            query = intent["entities"][0]["value"] if intent["entities"] else user_input
            print(f"Бот: Ищу картинки по запросу: '{query}'...")

            # Поиск изображений
            image_folder = "./images"  # Укажите путь к папке с изображениями
            results = find_similar_images(query, image_folder)

            # Выдача результата
            if results:
                print("Бот: Вот похожие картинки:")
                for path, score in results:
                    print(f"  - {path} (сходство: {score:.2f})")
            else:
                print("Бот: Не нашел подходящих изображений.")
        else:
            print("Бот: Я пока не понимаю этот запрос. Попробуйте еще раз.")

if __name__ == "__main__":
    chatbot()
